"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/items/[id]";
exports.ids = ["pages/api/items/[id]"];
exports.modules = {

/***/ "ethers":
/*!*************************!*\
  !*** external "ethers" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("ethers");

/***/ }),

/***/ "mongodb":
/*!**************************!*\
  !*** external "mongodb" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("mongodb");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fitems%2F%5Bid%5D&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Citems%5C%5Bid%5D.js&middlewareConfigBase64=e30%3D!":
/*!**************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fitems%2F%5Bid%5D&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Citems%5C%5Bid%5D.js&middlewareConfigBase64=e30%3D! ***!
  \**************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/pages-api/module.compiled */ \"(api)/./node_modules/next/dist/server/future/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(api)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_items_id_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages\\api\\items\\[id].js */ \"(api)/./pages/api/items/[id].js\");\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_items_id_js__WEBPACK_IMPORTED_MODULE_3__, \"default\"));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_items_id_js__WEBPACK_IMPORTED_MODULE_3__, \"config\");\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/items/[id]\",\n        pathname: \"/api/items/[id]\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\"\n    },\n    userland: _pages_api_items_id_js__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTX0FQSSZwYWdlPSUyRmFwaSUyRml0ZW1zJTJGJTVCaWQlNUQmcHJlZmVycmVkUmVnaW9uPSZhYnNvbHV0ZVBhZ2VQYXRoPS4lMkZwYWdlcyU1Q2FwaSU1Q2l0ZW1zJTVDJTVCaWQlNUQuanMmbWlkZGxld2FyZUNvbmZpZ0Jhc2U2ND1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQXNHO0FBQ3ZDO0FBQ0w7QUFDMUQ7QUFDeUQ7QUFDekQ7QUFDQSxpRUFBZSx3RUFBSyxDQUFDLG1EQUFRLFlBQVksRUFBQztBQUMxQztBQUNPLGVBQWUsd0VBQUssQ0FBQyxtREFBUTtBQUNwQztBQUNPLHdCQUF3QixnSEFBbUI7QUFDbEQ7QUFDQSxjQUFjLHlFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsWUFBWTtBQUNaLENBQUM7O0FBRUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jcnlwdG8tcDJwLW1hcmtldHBsYWNlLz81ODIwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBhZ2VzQVBJUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9wYWdlcy1hcGkvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgaG9pc3QgfSBmcm9tIFwibmV4dC9kaXN0L2J1aWxkL3RlbXBsYXRlcy9oZWxwZXJzXCI7XG4vLyBJbXBvcnQgdGhlIHVzZXJsYW5kIGNvZGUuXG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiLi9wYWdlc1xcXFxhcGlcXFxcaXRlbXNcXFxcW2lkXS5qc1wiO1xuLy8gUmUtZXhwb3J0IHRoZSBoYW5kbGVyIChzaG91bGQgYmUgdGhlIGRlZmF1bHQgZXhwb3J0KS5cbmV4cG9ydCBkZWZhdWx0IGhvaXN0KHVzZXJsYW5kLCBcImRlZmF1bHRcIik7XG4vLyBSZS1leHBvcnQgY29uZmlnLlxuZXhwb3J0IGNvbnN0IGNvbmZpZyA9IGhvaXN0KHVzZXJsYW5kLCBcImNvbmZpZ1wiKTtcbi8vIENyZWF0ZSBhbmQgZXhwb3J0IHRoZSByb3V0ZSBtb2R1bGUgdGhhdCB3aWxsIGJlIGNvbnN1bWVkLlxuZXhwb3J0IGNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IFBhZ2VzQVBJUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLlBBR0VTX0FQSSxcbiAgICAgICAgcGFnZTogXCIvYXBpL2l0ZW1zL1tpZF1cIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9pdGVtcy9baWRdXCIsXG4gICAgICAgIC8vIFRoZSBmb2xsb3dpbmcgYXJlbid0IHVzZWQgaW4gcHJvZHVjdGlvbi5cbiAgICAgICAgYnVuZGxlUGF0aDogXCJcIixcbiAgICAgICAgZmlsZW5hbWU6IFwiXCJcbiAgICB9LFxuICAgIHVzZXJsYW5kXG59KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFnZXMtYXBpLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fitems%2F%5Bid%5D&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Citems%5C%5Bid%5D.js&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api)/./pages/api/items/[id].js":
/*!*********************************!*\
  !*** ./pages/api/items/[id].js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _utils_mongodb__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utils/mongodb */ \"(api)/./utils/mongodb.js\");\n/* harmony import */ var _utils_blockchain__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../utils/blockchain */ \"(api)/./utils/blockchain.js\");\n\n\nasync function handler(req, res) {\n    const { id } = req.query;\n    if (!id) {\n        return res.status(400).json({\n            success: false,\n            error: \"Item ID is required\"\n        });\n    }\n    if (req.method === \"GET\") {\n        try {\n            // Get item from MongoDB\n            const item = await (0,_utils_mongodb__WEBPACK_IMPORTED_MODULE_0__.getItemById)(id);\n            if (!item) {\n                return res.status(404).json({\n                    success: false,\n                    error: \"Item not found\"\n                });\n            }\n            // Get trade details from blockchain\n            const { success, details } = await (0,_utils_blockchain__WEBPACK_IMPORTED_MODULE_1__.getTradeDetails)(item.itemId);\n            if (success) {\n                // Check if the item is completed on the blockchain\n                if (details.isCompleted) {\n                    // If completed, delete from MongoDB\n                    await (0,_utils_mongodb__WEBPACK_IMPORTED_MODULE_0__.deleteItem)(item.itemId);\n                    return res.status(404).json({\n                        success: false,\n                        error: \"Item has been completed and is no longer available\"\n                    });\n                }\n                // Check if buyer is zero address (no real buyer yet)\n                const hasBuyer = details.buyer && details.buyer !== \"0x0000000000000000000000000000000000000000\";\n                // Update item with blockchain data\n                const updatedItem = {\n                    ...item,\n                    seller: details.seller,\n                    buyer: hasBuyer ? details.buyer : null,\n                    isDelivered: details.isDelivered,\n                    isCompleted: details.isCompleted\n                };\n                // Update MongoDB with latest blockchain data\n                await (0,_utils_mongodb__WEBPACK_IMPORTED_MODULE_0__.updateItem)(item.itemId, {\n                    buyer: hasBuyer ? details.buyer : null,\n                    isDelivered: details.isDelivered,\n                    isCompleted: details.isCompleted\n                });\n                return res.status(200).json({\n                    success: true,\n                    item: updatedItem\n                });\n            }\n            return res.status(200).json({\n                success: true,\n                item\n            });\n        } catch (error) {\n            console.error(\"Error fetching item details:\", error);\n            return res.status(500).json({\n                success: false,\n                error: \"Failed to fetch item details\"\n            });\n        }\n    } else if (req.method === \"PUT\") {\n        try {\n            const { price, buyerTelegramLink, buyer } = req.body;\n            // Get the item from MongoDB\n            const item = await (0,_utils_mongodb__WEBPACK_IMPORTED_MODULE_0__.getItemById)(id);\n            if (!item) {\n                return res.status(404).json({\n                    success: false,\n                    error: \"Item not found\"\n                });\n            }\n            // Create an updates object to store all updates\n            const updates = {};\n            // Handle price update\n            if (price !== undefined) {\n                if (!price || isNaN(parseFloat(price)) || parseFloat(price) <= 0) {\n                    return res.status(400).json({\n                        success: false,\n                        error: \"Valid price is required\"\n                    });\n                }\n                updates.price = price;\n            }\n            // Handle buyer and buyerTelegramLink update\n            if (buyerTelegramLink !== undefined) {\n                // Validate Telegram link format\n                if (!buyerTelegramLink.startsWith(\"https://t.me/\") && !buyerTelegramLink.startsWith(\"http://t.me/\") && !buyerTelegramLink.startsWith(\"t.me/\")) {\n                    return res.status(400).json({\n                        success: false,\n                        error: \"Invalid Telegram link format. Must start with https://t.me/, http://t.me/, or t.me/\"\n                    });\n                }\n                updates.buyerTelegramLink = buyerTelegramLink;\n            }\n            // Update buyer address if provided\n            if (buyer !== undefined) {\n                updates.buyer = buyer;\n            }\n            // Only update if there are changes\n            if (Object.keys(updates).length > 0) {\n                // Update item in MongoDB\n                await (0,_utils_mongodb__WEBPACK_IMPORTED_MODULE_0__.updateItem)(id, updates);\n            }\n            return res.status(200).json({\n                success: true\n            });\n        } catch (error) {\n            console.error(\"Error updating item:\", error);\n            return res.status(500).json({\n                success: false,\n                error: \"Failed to update item\"\n            });\n        }\n    } else if (req.method === \"DELETE\") {\n        // Handle deleting item\n        try {\n            await (0,_utils_mongodb__WEBPACK_IMPORTED_MODULE_0__.deleteItem)(id);\n            return res.status(200).json({\n                success: true\n            });\n        } catch (error) {\n            console.error(\"Error deleting item:\", error);\n            return res.status(500).json({\n                success: false,\n                error: \"Failed to delete item\"\n            });\n        }\n    } else {\n        return res.status(405).json({\n            success: false,\n            error: \"Method not allowed\"\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./pages/api/items/[id].js\n");

/***/ }),

/***/ "(api)/./utils/blockchain.js":
/*!*****************************!*\
  !*** ./utils/blockchain.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   buyOrder: () => (/* binding */ buyOrder),\n/* harmony export */   checkBaseNetwork: () => (/* binding */ checkBaseNetwork),\n/* harmony export */   claimPayment: () => (/* binding */ claimPayment),\n/* harmony export */   confirmDelivery: () => (/* binding */ confirmDelivery),\n/* harmony export */   connectWallet: () => (/* binding */ connectWallet),\n/* harmony export */   editBuyOrderPrice: () => (/* binding */ editBuyOrderPrice),\n/* harmony export */   editItemPrice: () => (/* binding */ editItemPrice),\n/* harmony export */   getContract: () => (/* binding */ getContract),\n/* harmony export */   getCurrentAccount: () => (/* binding */ getCurrentAccount),\n/* harmony export */   getProvider: () => (/* binding */ getProvider),\n/* harmony export */   getSigner: () => (/* binding */ getSigner),\n/* harmony export */   getTradeDetails: () => (/* binding */ getTradeDetails),\n/* harmony export */   isWalletConnected: () => (/* binding */ isWalletConnected),\n/* harmony export */   listItem: () => (/* binding */ listItem),\n/* harmony export */   purchaseItem: () => (/* binding */ purchaseItem),\n/* harmony export */   switchToBaseNetwork: () => (/* binding */ switchToBaseNetwork)\n/* harmony export */ });\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ethers */ \"ethers\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(ethers__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _contracts_P2PMarketplaceABI_json__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../contracts/P2PMarketplaceABI.json */ \"(api)/./contracts/P2PMarketplaceABI.json\");\n\n\nconst contractAddress = \"0x3d85cAe97fff249766F080f746AD0CBb70132154\";\nconst baseNetworkUrl = \"https://base-mainnet.infura.io/v3/456ba81d8fee49ee8e52af67e725cf75\";\n// Get provider based on environment\nconst getProvider = ()=>{\n    // For client-side\n    if (false) {}\n    // For server-side or fallback\n    return new ethers__WEBPACK_IMPORTED_MODULE_0__.ethers.providers.JsonRpcProvider(baseNetworkUrl);\n};\n// Get signer for transactions\nconst getSigner = async ()=>{\n    // Check if we're on the server side\n    if (true) {\n        throw new Error(\"Cannot get signer on server-side. This function must be called from client-side code.\");\n    }\n    // Check if wallet is available\n    if (!window.ethereum) {\n        throw new Error(\"No wallet detected. Please install a Web3 wallet like MetaMask.\");\n    }\n    const provider = getProvider();\n    // Request account access if needed\n    if (provider && provider.provider && provider.provider.request) {\n        try {\n            await provider.provider.request({\n                method: \"eth_requestAccounts\"\n            });\n        } catch (error) {\n            console.error(\"Error requesting accounts:\", error);\n            throw new Error(\"Failed to connect to wallet: \" + error.message);\n        }\n    } else if (window.ethereum) {\n        // Fallback for some wallet providers\n        try {\n            await window.ethereum.request({\n                method: \"eth_requestAccounts\"\n            });\n        } catch (error) {\n            console.error(\"Error requesting accounts via window.ethereum:\", error);\n            throw new Error(\"Failed to connect to wallet: \" + error.message);\n        }\n    } else {\n        throw new Error(\"No wallet connection method available. Please make sure your wallet is unlocked.\");\n    }\n    // Verify we have accounts before returning signer\n    const accounts = await provider.listAccounts();\n    if (!accounts || accounts.length === 0) {\n        throw new Error(\"No accounts found. Please make sure your wallet is connected and unlocked.\");\n    }\n    return provider.getSigner();\n};\n// Get contract instance\nconst getContract = async (withSigner = false)=>{\n    if (!contractAddress) {\n        throw new Error(\"Contract address not configured\");\n    }\n    if (withSigner) {\n        const signer = await getSigner();\n        return new ethers__WEBPACK_IMPORTED_MODULE_0__.ethers.Contract(contractAddress, _contracts_P2PMarketplaceABI_json__WEBPACK_IMPORTED_MODULE_1__, signer);\n    }\n    const provider = getProvider();\n    return new ethers__WEBPACK_IMPORTED_MODULE_0__.ethers.Contract(contractAddress, _contracts_P2PMarketplaceABI_json__WEBPACK_IMPORTED_MODULE_1__, provider);\n};\n// Connect wallet and return address\nconst connectWallet = async ()=>{\n    try {\n        const signer = await getSigner();\n        const address = await signer.getAddress();\n        return {\n            success: true,\n            address\n        };\n    } catch (error) {\n        console.error(\"Error connecting wallet:\", error);\n        return {\n            success: false,\n            error: error.message\n        };\n    }\n};\n// List an item on the marketplace\nconst listItem = async (price, name, description)=>{\n    try {\n        const contract = await getContract(true);\n        const priceInWei = ethers__WEBPACK_IMPORTED_MODULE_0__.ethers.utils.parseEther(price.toString());\n        const listingFee = ethers__WEBPACK_IMPORTED_MODULE_0__.ethers.utils.parseEther(\"0.0002\");\n        // Call the contract function\n        const tx = await contract.listItem(priceInWei, {\n            value: listingFee\n        });\n        // Wait for transaction to be mined\n        const receipt = await tx.wait();\n        // Get the itemId from the event\n        const event = receipt.events.find((event)=>event.event === \"ItemListed\");\n        // Check if the event exists before accessing its properties\n        if (!event || !event.args) {\n            // If event is not found, try to get the itemId from logs\n            console.log(\"ItemListed event not found in transaction receipt, trying alternative methods\");\n            // Since we can't directly access nextItemId (it's private in the contract),\n            // we'll need to estimate it based on transaction data or use another approach\n            // Let's try to query the transaction receipt for more information\n            const logs = receipt.logs;\n            let itemId;\n            // Try to extract itemId from logs\n            if (logs && logs.length > 0) {\n                // Look for the last log which might contain our event data\n                const lastLog = logs[logs.length - 1];\n                // Try to decode the log data to find the itemId\n                try {\n                    // The itemId is likely in the data or topics of the log\n                    // This is a simplified approach - might need adjustment based on actual log structure\n                    const topicData = lastLog.topics[1]; // Second topic often contains indexed parameters\n                    if (topicData) {\n                        itemId = parseInt(topicData, 16);\n                    }\n                } catch (err) {\n                    console.error(\"Error extracting itemId from logs:\", err);\n                }\n            }\n            // If we couldn't extract from logs, make a best guess\n            if (!itemId) {\n                // As a fallback, we'll query a recent item to estimate the ID\n                // This is not ideal but better than failing completely\n                itemId = Date.now(); // Use timestamp as a last resort placeholder\n                console.warn(\"Could not determine exact itemId, using fallback method\");\n            }\n            return {\n                success: true,\n                itemId\n            };\n        }\n        const itemId = event.args.itemId.toNumber();\n        return {\n            success: true,\n            itemId\n        };\n    } catch (error) {\n        console.error(\"Error listing item:\", error);\n        return {\n            success: false,\n            error: error.message\n        };\n    }\n};\n// Purchase an item\nconst purchaseItem = async (itemId, price)=>{\n    try {\n        const contract = await getContract(true);\n        const priceInWei = ethers__WEBPACK_IMPORTED_MODULE_0__.ethers.utils.parseEther(price.toString());\n        // Call the contract function\n        const tx = await contract.purchaseItem(itemId, {\n            value: priceInWei\n        });\n        // Wait for transaction to be mined\n        await tx.wait();\n        return {\n            success: true\n        };\n    } catch (error) {\n        console.error(\"Error purchasing item:\", error);\n        return {\n            success: false,\n            error: error.message\n        };\n    }\n};\n// Confirm delivery of an item\nconst confirmDelivery = async (itemId)=>{\n    try {\n        const contract = await getContract(true);\n        // Call the contract function\n        const tx = await contract.confirmDelivery(itemId);\n        // Wait for transaction to be mined\n        await tx.wait();\n        return {\n            success: true\n        };\n    } catch (error) {\n        console.error(\"Error confirming delivery:\", error);\n        return {\n            success: false,\n            error: error.message\n        };\n    }\n};\n// Claim payment for a sold item\nconst claimPayment = async (itemId)=>{\n    try {\n        const contract = await getContract(true);\n        // Call the contract function\n        const tx = await contract.claimPayment(itemId);\n        // Wait for transaction to be mined\n        await tx.wait();\n        return {\n            success: true\n        };\n    } catch (error) {\n        console.error(\"Error claiming payment:\", error);\n        return {\n            success: false,\n            error: error.message\n        };\n    }\n};\n// Edit item price\nconst editItemPrice = async (itemId, newPrice)=>{\n    try {\n        const contract = await getContract(true);\n        const priceInWei = ethers__WEBPACK_IMPORTED_MODULE_0__.ethers.utils.parseEther(newPrice.toString());\n        // Get trade details to check if it's a buy order\n        const { success: detailsSuccess, details } = await getTradeDetails(itemId);\n        if (!detailsSuccess) {\n            throw new Error(\"Failed to get trade details\");\n        }\n        // For buy orders, we need to use editBuyOrderPrice instead of editItemPrice\n        // Buy orders have seller as address(0) and buyer as the creator\n        const isBuyOrder = details.seller === \"0x0000000000000000000000000000000000000000\";\n        let tx;\n        if (isBuyOrder) {\n            // If this is a buy order, use the editBuyOrderPrice function\n            tx = await contract.editBuyOrderPrice(itemId, priceInWei);\n        } else {\n            // For regular sell orders, use the existing editItemPrice function\n            tx = await contract.editItemPrice(itemId, priceInWei);\n        }\n        // Wait for transaction to be mined\n        await tx.wait();\n        return {\n            success: true\n        };\n    } catch (error) {\n        console.error(\"Error editing item price:\", error);\n        return {\n            success: false,\n            error: error.message\n        };\n    }\n};\n// Edit buy order price\nconst editBuyOrderPrice = async (itemId, newPrice)=>{\n    try {\n        const contract = await getContract(true);\n        const priceInWei = ethers__WEBPACK_IMPORTED_MODULE_0__.ethers.utils.parseEther(newPrice.toString());\n        // Call the contract function\n        const tx = await contract.editBuyOrderPrice(itemId, priceInWei);\n        // Wait for transaction to be mined\n        await tx.wait();\n        return {\n            success: true\n        };\n    } catch (error) {\n        console.error(\"Error editing buy order price:\", error);\n        return {\n            success: false,\n            error: error.message\n        };\n    }\n};\n// Create a buy order\nconst buyOrder = async (price)=>{\n    try {\n        const contract = await getContract(true);\n        const priceInWei = ethers__WEBPACK_IMPORTED_MODULE_0__.ethers.utils.parseEther(price.toString());\n        const buyOrderFee = ethers__WEBPACK_IMPORTED_MODULE_0__.ethers.utils.parseEther(\"0.00005\");\n        // Call the contract function with the fee\n        const tx = await contract.buyOrder(priceInWei, {\n            value: buyOrderFee\n        });\n        // Wait for transaction to be mined\n        const receipt = await tx.wait();\n        // Get the itemId from the event\n        const event = receipt.events.find((event)=>event.event === \"BuyOrderPlaced\");\n        // Check if the event exists before accessing its properties\n        if (!event || !event.args) {\n            // If event is not found, try to get the itemId from logs\n            console.log(\"BuyOrderPlaced event not found in transaction receipt, trying alternative methods\");\n            // Since we can't directly access nextItemId (it's private in the contract),\n            // we'll need to estimate it based on transaction data or use another approach\n            const logs = receipt.logs;\n            let itemId;\n            // Try to extract itemId from logs\n            if (logs && logs.length > 0) {\n                // Look for the last log which might contain our event data\n                const lastLog = logs[logs.length - 1];\n                // Try to decode the log data to find the itemId\n                try {\n                    // The itemId is likely in the data or topics of the log\n                    // This is a simplified approach - might need adjustment based on actual log structure\n                    const topicData = lastLog.topics[1]; // Second topic often contains indexed parameters\n                    if (topicData) {\n                        itemId = parseInt(topicData, 16);\n                    }\n                } catch (err) {\n                    console.error(\"Error extracting itemId from logs:\", err);\n                }\n            }\n            // If we couldn't extract from logs, make a best guess\n            if (!itemId) {\n                // As a fallback, we'll query a recent item to estimate the ID\n                // This is not ideal but better than failing completely\n                itemId = Date.now(); // Use timestamp as a last resort placeholder\n                console.warn(\"Could not determine exact itemId, using fallback method\");\n            }\n            return {\n                success: true,\n                itemId\n            };\n        }\n        const itemId = event.args.itemId.toNumber();\n        return {\n            success: true,\n            itemId\n        };\n    } catch (error) {\n        console.error(\"Error creating buy order:\", error);\n        return {\n            success: false,\n            error: error.message\n        };\n    }\n};\n// Get trade details\nconst getTradeDetails = async (itemId)=>{\n    try {\n        const contract = await getContract();\n        // Call the contract function\n        const details = await contract.getTradeDetails(itemId);\n        return {\n            success: true,\n            details: {\n                seller: details[0],\n                buyer: details[1],\n                price: ethers__WEBPACK_IMPORTED_MODULE_0__.ethers.utils.formatEther(details[2]),\n                isDelivered: details[3],\n                isCompleted: details[4]\n            }\n        };\n    } catch (error) {\n        console.error(\"Error getting trade details:\", error);\n        return {\n            success: false,\n            error: error.message\n        };\n    }\n};\n// Check if wallet is connected\nconst isWalletConnected = async ()=>{\n    try {\n        if (true) {\n            return false;\n        }\n        const provider = getProvider();\n        const accounts = await provider.listAccounts();\n        return accounts && accounts.length > 0;\n    } catch (error) {\n        console.error(\"Error checking wallet connection:\", error);\n        return false;\n    }\n};\n// Get current account\nconst getCurrentAccount = async ()=>{\n    try {\n        if (!await isWalletConnected()) {\n            return null;\n        }\n        const provider = getProvider();\n        const accounts = await provider.listAccounts();\n        return accounts[0] || null;\n    } catch (error) {\n        console.error(\"Error getting current account:\", error);\n        return null;\n    }\n};\n// Check if user is connected to Base blockchain\nconst checkBaseNetwork = async ()=>{\n    try {\n        if (true) {\n            return {\n                isBase: false,\n                chainId: null\n            };\n        }\n        const provider = getProvider();\n        const network = await provider.getNetwork();\n        // Base Mainnet chainId is 8453, Base Testnet (Goerli) is 84531\n        // We'll check for both to support development environments\n        const baseChainIds = [\n            8453,\n            84531\n        ];\n        const isBase = baseChainIds.includes(network.chainId);\n        return {\n            isBase,\n            chainId: network.chainId,\n            name: network.name\n        };\n    } catch (error) {\n        console.error(\"Error checking network:\", error);\n        return {\n            isBase: false,\n            chainId: null\n        };\n    }\n};\n// Switch to Base network\nconst switchToBaseNetwork = async ()=>{\n    try {\n        if (true) {\n            return {\n                success: false,\n                error: \"No wallet detected\"\n            };\n        }\n        // Base Mainnet parameters\n        const baseChainId = \"0x2105\"; // 8453 in hex\n        const baseParams = {\n            chainId: baseChainId,\n            chainName: \"Base Mainnet\",\n            nativeCurrency: {\n                name: \"Ethereum\",\n                symbol: \"ETH\",\n                decimals: 18\n            },\n            rpcUrls: [\n                \"https://base.gateway.tenderly.co\"\n            ],\n            blockExplorerUrls: [\n                \"https://basescan.org\"\n            ]\n        };\n        try {\n            // First try to switch to the network\n            await window.ethereum.request({\n                method: \"wallet_switchEthereumChain\",\n                params: [\n                    {\n                        chainId: baseChainId\n                    }\n                ]\n            });\n            return {\n                success: true\n            };\n        } catch (switchError) {\n            // If the network is not added to MetaMask, add it\n            if (switchError.code === 4902) {\n                try {\n                    await window.ethereum.request({\n                        method: \"wallet_addEthereumChain\",\n                        params: [\n                            baseParams\n                        ]\n                    });\n                    return {\n                        success: true\n                    };\n                } catch (addError) {\n                    return {\n                        success: false,\n                        error: \"Failed to add Base network: \" + addError.message\n                    };\n                }\n            } else {\n                return {\n                    success: false,\n                    error: \"Failed to switch to Base network: \" + switchError.message\n                };\n            }\n        }\n    } catch (error) {\n        console.error(\"Error switching network:\", error);\n        return {\n            success: false,\n            error: error.message\n        };\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./utils/blockchain.js\n");

/***/ }),

/***/ "(api)/./utils/mongodb.js":
/*!**************************!*\
  !*** ./utils/mongodb.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createItem: () => (/* binding */ createItem),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   deleteItem: () => (/* binding */ deleteItem),\n/* harmony export */   getAllItems: () => (/* binding */ getAllItems),\n/* harmony export */   getItemById: () => (/* binding */ getItemById),\n/* harmony export */   getItemsCollection: () => (/* binding */ getItemsCollection),\n/* harmony export */   searchItems: () => (/* binding */ searchItems),\n/* harmony export */   updateItem: () => (/* binding */ updateItem)\n/* harmony export */ });\n/* harmony import */ var mongodb__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mongodb */ \"mongodb\");\n/* harmony import */ var mongodb__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(mongodb__WEBPACK_IMPORTED_MODULE_0__);\n\nconst uri = process.env.MONGODB_URI;\nconst options = {\n    useUnifiedTopology: true,\n    useNewUrlParser: true\n};\nlet client;\nlet clientPromise;\nif (!process.env.MONGODB_URI) {\n    throw new Error(\"Please add your MongoDB URI to .env.local\");\n}\nif (true) {\n    // In development mode, use a global variable so that the value\n    // is preserved across module reloads caused by HMR (Hot Module Replacement).\n    if (!global._mongoClientPromise) {\n        client = new mongodb__WEBPACK_IMPORTED_MODULE_0__.MongoClient(uri, options);\n        global._mongoClientPromise = client.connect();\n    }\n    clientPromise = global._mongoClientPromise;\n} else {}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (clientPromise);\n// Helper functions for database operations\nasync function getItemsCollection() {\n    const client = await clientPromise;\n    const db = client.db(process.env.MONGODB_DB || \"p2p-marketplace\");\n    return db.collection(\"items\");\n}\nasync function getAllItems(query = {}) {\n    const collection = await getItemsCollection();\n    return collection.find(query).toArray();\n}\nasync function getItemById(id) {\n    const collection = await getItemsCollection();\n    return collection.findOne({\n        itemId: parseInt(id)\n    });\n}\nasync function createItem(item) {\n    const collection = await getItemsCollection();\n    return collection.insertOne(item);\n}\nasync function updateItem(id, updates) {\n    const collection = await getItemsCollection();\n    return collection.updateOne({\n        itemId: parseInt(id)\n    }, {\n        $set: updates\n    });\n}\nasync function deleteItem(id) {\n    const collection = await getItemsCollection();\n    return collection.deleteOne({\n        itemId: parseInt(id)\n    });\n}\nasync function searchItems(query) {\n    const collection = await getItemsCollection();\n    return collection.find({\n        name: {\n            $regex: query,\n            $options: \"i\"\n        }\n    }).toArray();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi91dGlscy9tb25nb2RiLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBc0M7QUFFdEMsTUFBTUMsTUFBTUMsUUFBUUMsR0FBRyxDQUFDQyxXQUFXO0FBQ25DLE1BQU1DLFVBQVU7SUFDZEMsb0JBQW9CO0lBQ3BCQyxpQkFBaUI7QUFDbkI7QUFFQSxJQUFJQztBQUNKLElBQUlDO0FBRUosSUFBSSxDQUFDUCxRQUFRQyxHQUFHLENBQUNDLFdBQVcsRUFBRTtJQUM1QixNQUFNLElBQUlNLE1BQU07QUFDbEI7QUFFQSxJQUFJUixJQUF5QixFQUFlO0lBQzFDLCtEQUErRDtJQUMvRCw2RUFBNkU7SUFDN0UsSUFBSSxDQUFDUyxPQUFPQyxtQkFBbUIsRUFBRTtRQUMvQkosU0FBUyxJQUFJUixnREFBV0EsQ0FBQ0MsS0FBS0k7UUFDOUJNLE9BQU9DLG1CQUFtQixHQUFHSixPQUFPSyxPQUFPO0lBQzdDO0lBQ0FKLGdCQUFnQkUsT0FBT0MsbUJBQW1CO0FBQzVDLE9BQU8sRUFJTjtBQUVELGlFQUFlSCxhQUFhQSxFQUFDO0FBRTdCLDJDQUEyQztBQUNwQyxlQUFlSztJQUNwQixNQUFNTixTQUFTLE1BQU1DO0lBQ3JCLE1BQU1NLEtBQUtQLE9BQU9PLEVBQUUsQ0FBQ2IsUUFBUUMsR0FBRyxDQUFDYSxVQUFVLElBQUk7SUFDL0MsT0FBT0QsR0FBR0UsVUFBVSxDQUFDO0FBQ3ZCO0FBRU8sZUFBZUMsWUFBWUMsUUFBUSxDQUFDLENBQUM7SUFDMUMsTUFBTUYsYUFBYSxNQUFNSDtJQUN6QixPQUFPRyxXQUFXRyxJQUFJLENBQUNELE9BQU9FLE9BQU87QUFDdkM7QUFFTyxlQUFlQyxZQUFZQyxFQUFFO0lBQ2xDLE1BQU1OLGFBQWEsTUFBTUg7SUFDekIsT0FBT0csV0FBV08sT0FBTyxDQUFDO1FBQUVDLFFBQVFDLFNBQVNIO0lBQUk7QUFDbkQ7QUFFTyxlQUFlSSxXQUFXQyxJQUFJO0lBQ25DLE1BQU1YLGFBQWEsTUFBTUg7SUFDekIsT0FBT0csV0FBV1ksU0FBUyxDQUFDRDtBQUM5QjtBQUVPLGVBQWVFLFdBQVdQLEVBQUUsRUFBRVEsT0FBTztJQUMxQyxNQUFNZCxhQUFhLE1BQU1IO0lBQ3pCLE9BQU9HLFdBQVdlLFNBQVMsQ0FDekI7UUFBRVAsUUFBUUMsU0FBU0g7SUFBSSxHQUN2QjtRQUFFVSxNQUFNRjtJQUFRO0FBRXBCO0FBRU8sZUFBZUcsV0FBV1gsRUFBRTtJQUNqQyxNQUFNTixhQUFhLE1BQU1IO0lBQ3pCLE9BQU9HLFdBQVdrQixTQUFTLENBQUM7UUFBRVYsUUFBUUMsU0FBU0g7SUFBSTtBQUNyRDtBQUVPLGVBQWVhLFlBQVlqQixLQUFLO0lBQ3JDLE1BQU1GLGFBQWEsTUFBTUg7SUFDekIsT0FBT0csV0FBV0csSUFBSSxDQUFDO1FBQ3JCaUIsTUFBTTtZQUFFQyxRQUFRbkI7WUFBT29CLFVBQVU7UUFBSTtJQUN2QyxHQUFHbEIsT0FBTztBQUNaIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY3J5cHRvLXAycC1tYXJrZXRwbGFjZS8uL3V0aWxzL21vbmdvZGIuanM/OGZkNCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNb25nb0NsaWVudCB9IGZyb20gJ21vbmdvZGInO1xuXG5jb25zdCB1cmkgPSBwcm9jZXNzLmVudi5NT05HT0RCX1VSSTtcbmNvbnN0IG9wdGlvbnMgPSB7XG4gIHVzZVVuaWZpZWRUb3BvbG9neTogdHJ1ZSxcbiAgdXNlTmV3VXJsUGFyc2VyOiB0cnVlLFxufTtcblxubGV0IGNsaWVudDtcbmxldCBjbGllbnRQcm9taXNlO1xuXG5pZiAoIXByb2Nlc3MuZW52Lk1PTkdPREJfVVJJKSB7XG4gIHRocm93IG5ldyBFcnJvcignUGxlYXNlIGFkZCB5b3VyIE1vbmdvREIgVVJJIHRvIC5lbnYubG9jYWwnKTtcbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnKSB7XG4gIC8vIEluIGRldmVsb3BtZW50IG1vZGUsIHVzZSBhIGdsb2JhbCB2YXJpYWJsZSBzbyB0aGF0IHRoZSB2YWx1ZVxuICAvLyBpcyBwcmVzZXJ2ZWQgYWNyb3NzIG1vZHVsZSByZWxvYWRzIGNhdXNlZCBieSBITVIgKEhvdCBNb2R1bGUgUmVwbGFjZW1lbnQpLlxuICBpZiAoIWdsb2JhbC5fbW9uZ29DbGllbnRQcm9taXNlKSB7XG4gICAgY2xpZW50ID0gbmV3IE1vbmdvQ2xpZW50KHVyaSwgb3B0aW9ucyk7XG4gICAgZ2xvYmFsLl9tb25nb0NsaWVudFByb21pc2UgPSBjbGllbnQuY29ubmVjdCgpO1xuICB9XG4gIGNsaWVudFByb21pc2UgPSBnbG9iYWwuX21vbmdvQ2xpZW50UHJvbWlzZTtcbn0gZWxzZSB7XG4gIC8vIEluIHByb2R1Y3Rpb24gbW9kZSwgaXQncyBiZXN0IHRvIG5vdCB1c2UgYSBnbG9iYWwgdmFyaWFibGUuXG4gIGNsaWVudCA9IG5ldyBNb25nb0NsaWVudCh1cmksIG9wdGlvbnMpO1xuICBjbGllbnRQcm9taXNlID0gY2xpZW50LmNvbm5lY3QoKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xpZW50UHJvbWlzZTtcblxuLy8gSGVscGVyIGZ1bmN0aW9ucyBmb3IgZGF0YWJhc2Ugb3BlcmF0aW9uc1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldEl0ZW1zQ29sbGVjdGlvbigpIHtcbiAgY29uc3QgY2xpZW50ID0gYXdhaXQgY2xpZW50UHJvbWlzZTtcbiAgY29uc3QgZGIgPSBjbGllbnQuZGIocHJvY2Vzcy5lbnYuTU9OR09EQl9EQiB8fCAncDJwLW1hcmtldHBsYWNlJyk7XG4gIHJldHVybiBkYi5jb2xsZWN0aW9uKCdpdGVtcycpO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0QWxsSXRlbXMocXVlcnkgPSB7fSkge1xuICBjb25zdCBjb2xsZWN0aW9uID0gYXdhaXQgZ2V0SXRlbXNDb2xsZWN0aW9uKCk7XG4gIHJldHVybiBjb2xsZWN0aW9uLmZpbmQocXVlcnkpLnRvQXJyYXkoKTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldEl0ZW1CeUlkKGlkKSB7XG4gIGNvbnN0IGNvbGxlY3Rpb24gPSBhd2FpdCBnZXRJdGVtc0NvbGxlY3Rpb24oKTtcbiAgcmV0dXJuIGNvbGxlY3Rpb24uZmluZE9uZSh7IGl0ZW1JZDogcGFyc2VJbnQoaWQpIH0pO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY3JlYXRlSXRlbShpdGVtKSB7XG4gIGNvbnN0IGNvbGxlY3Rpb24gPSBhd2FpdCBnZXRJdGVtc0NvbGxlY3Rpb24oKTtcbiAgcmV0dXJuIGNvbGxlY3Rpb24uaW5zZXJ0T25lKGl0ZW0pO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gdXBkYXRlSXRlbShpZCwgdXBkYXRlcykge1xuICBjb25zdCBjb2xsZWN0aW9uID0gYXdhaXQgZ2V0SXRlbXNDb2xsZWN0aW9uKCk7XG4gIHJldHVybiBjb2xsZWN0aW9uLnVwZGF0ZU9uZShcbiAgICB7IGl0ZW1JZDogcGFyc2VJbnQoaWQpIH0sXG4gICAgeyAkc2V0OiB1cGRhdGVzIH1cbiAgKTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGRlbGV0ZUl0ZW0oaWQpIHtcbiAgY29uc3QgY29sbGVjdGlvbiA9IGF3YWl0IGdldEl0ZW1zQ29sbGVjdGlvbigpO1xuICByZXR1cm4gY29sbGVjdGlvbi5kZWxldGVPbmUoeyBpdGVtSWQ6IHBhcnNlSW50KGlkKSB9KTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNlYXJjaEl0ZW1zKHF1ZXJ5KSB7XG4gIGNvbnN0IGNvbGxlY3Rpb24gPSBhd2FpdCBnZXRJdGVtc0NvbGxlY3Rpb24oKTtcbiAgcmV0dXJuIGNvbGxlY3Rpb24uZmluZCh7XG4gICAgbmFtZTogeyAkcmVnZXg6IHF1ZXJ5LCAkb3B0aW9uczogJ2knIH1cbiAgfSkudG9BcnJheSgpO1xufSJdLCJuYW1lcyI6WyJNb25nb0NsaWVudCIsInVyaSIsInByb2Nlc3MiLCJlbnYiLCJNT05HT0RCX1VSSSIsIm9wdGlvbnMiLCJ1c2VVbmlmaWVkVG9wb2xvZ3kiLCJ1c2VOZXdVcmxQYXJzZXIiLCJjbGllbnQiLCJjbGllbnRQcm9taXNlIiwiRXJyb3IiLCJnbG9iYWwiLCJfbW9uZ29DbGllbnRQcm9taXNlIiwiY29ubmVjdCIsImdldEl0ZW1zQ29sbGVjdGlvbiIsImRiIiwiTU9OR09EQl9EQiIsImNvbGxlY3Rpb24iLCJnZXRBbGxJdGVtcyIsInF1ZXJ5IiwiZmluZCIsInRvQXJyYXkiLCJnZXRJdGVtQnlJZCIsImlkIiwiZmluZE9uZSIsIml0ZW1JZCIsInBhcnNlSW50IiwiY3JlYXRlSXRlbSIsIml0ZW0iLCJpbnNlcnRPbmUiLCJ1cGRhdGVJdGVtIiwidXBkYXRlcyIsInVwZGF0ZU9uZSIsIiRzZXQiLCJkZWxldGVJdGVtIiwiZGVsZXRlT25lIiwic2VhcmNoSXRlbXMiLCJuYW1lIiwiJHJlZ2V4IiwiJG9wdGlvbnMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./utils/mongodb.js\n");

/***/ }),

/***/ "(api)/./contracts/P2PMarketplaceABI.json":
/*!******************************************!*\
  !*** ./contracts/P2PMarketplaceABI.json ***!
  \******************************************/
/***/ ((module) => {

module.exports = JSON.parse('[{"inputs":[{"internalType":"uint128","name":"price","type":"uint128"}],"name":"buyOrder","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address payable","name":"_treasury","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"buyer","type":"address"},{"indexed":true,"internalType":"uint256","name":"itemId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"price","type":"uint256"}],"name":"BuyOrderPlaced","type":"event"},{"inputs":[{"internalType":"uint256","name":"itemId","type":"uint256"}],"name":"claimPayment","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"itemId","type":"uint256"}],"name":"confirmDelivery","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"itemId","type":"uint256"},{"internalType":"uint128","name":"newPrice","type":"uint128"}],"name":"editBuyOrderPrice","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"itemId","type":"uint256"},{"internalType":"uint128","name":"newPrice","type":"uint128"}],"name":"editItemPrice","outputs":[],"stateMutability":"nonpayable","type":"function"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"itemId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"price","type":"uint256"}],"name":"ItemDelivered","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"seller","type":"address"},{"indexed":true,"internalType":"uint256","name":"itemId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"price","type":"uint256"}],"name":"ItemListed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"itemId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newPrice","type":"uint256"}],"name":"ItemPriceUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"itemId","type":"uint256"},{"indexed":true,"internalType":"address","name":"buyer","type":"address"},{"indexed":false,"internalType":"uint256","name":"price","type":"uint256"}],"name":"ItemPurchased","type":"event"},{"inputs":[{"internalType":"uint128","name":"price","type":"uint128"}],"name":"listItem","outputs":[],"stateMutability":"payable","type":"function"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"itemId","type":"uint256"},{"indexed":false,"internalType":"address","name":"seller","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"PaymentReleased","type":"event"},{"inputs":[{"internalType":"uint256","name":"itemId","type":"uint256"}],"name":"purchaseItem","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"Withdrawal","type":"event"},{"inputs":[{"internalType":"uint256","name":"itemId","type":"uint256"}],"name":"getTradeDetails","outputs":[{"internalType":"address","name":"seller","type":"address"},{"internalType":"address","name":"buyer","type":"address"},{"internalType":"uint256","name":"price","type":"uint256"},{"internalType":"bool","name":"isDelivered","type":"bool"},{"internalType":"bool","name":"isCompleted","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address payable","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"trades","outputs":[{"internalType":"address payable","name":"seller","type":"address"},{"internalType":"address payable","name":"buyer","type":"address"},{"internalType":"uint128","name":"price","type":"uint128"},{"internalType":"bool","name":"isDelivered","type":"bool"},{"internalType":"bool","name":"isCompleted","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"treasury","outputs":[{"internalType":"address payable","name":"","type":"address"}],"stateMutability":"view","type":"function"}]');

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fitems%2F%5Bid%5D&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Citems%5C%5Bid%5D.js&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();